OpenGLES第一章总结

* 图像

	图像是通过很多个像素点组成，每个像素点都至少有rgb三个值

* 计算机如何渲染图像

	CPU 中央处理单元 用以处理计算机中的程序运算
	GPU 图像处理单元 用以获得图像数据，然后将图像数据变为像素点，显示在硬件显示屏上
	RAM 内存空间，针对CPU和GPU都会有各自的RAM空间

* 缓存的概念
	
	GPU如果需要CPU程序运算后的数据来进行图像的渲染，这之间就需要一个工具来调节这两个单元
	的数据交换，OpenGLES就是为了做这个事情。

	因此opengles定义了缓存的概念，GPU可以根据这个缓存中的数据，渲染画面，也可以往缓存中
	填写当前的图像数据。

* 缓存的操作
	
	OpenGLES对缓存的操作提供了7个方法：
	1.请求OpenGLES生成一个独一无二的缓存标识符
	C方法：glGenBuffers()

	2.绑定一个缓存标识符，通知OpenGLES接下来的渲染使用这个缓存来进行
	C方法：glBindBuffer()

	3.创建一个缓存空间，然后将缓存空间与缓存标识符绑定起来
	C方法：glBufferData()或者glBufferSubData()

	4.设置OpenGLES是否使用这个缓存空间来进行渲染
	C方法：glEnableVertexAttribArray()或者C方法：glDisableVertexAttribArray

	5.通知OpenGLES，在缓存空间中，需要渲染的数据区域的偏移量
	C方法：glVertexAttribPointer()

	6.通知OpenGLES，让GPU渲染指定数据到整个场景或者某一场景
	C方法：glDrawArrays()或者glDrawElements()

	7.删除缓存并且释放资源
	C方法：glDeleteBuffers()

* 帧缓存

	帧缓存顾名思义就是缓存中储存了一个帧的图像数据，是用来接收渲染的结果的缓存，在渲染过后，会生成一个帧的数据，放入帧缓存，你同样需要生成绑定帧缓存，但是填写数据或者初始化的工作，都是由
	OpenGLES完成的。

	渲染时储存的时后帧缓存，屏幕上显示的是前帧缓存，在后帧缓存一个图形渲染完成时，才会替换前帧缓存显示在屏幕上。

* OpenGLES的上下文

	上下里面储存了当前平台的一些特定信息和数据结构，每种机器会不一样，因此很多方法中我们需要传入上下文
















