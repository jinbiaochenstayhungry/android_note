	SSL协议总结

一、加密算法
	1.对称加密：加密和解密使用相同的密钥，如下：

		A  密钥:32
		B  密钥:32

		源数据      加密后的数据       解密方法

		 100          3200          3200/32

		此时A发给B加密后数据时，B通过密钥相除就可以得到源数据

	2.非对称加密：解密和加密使用不同的密钥，一般称为公钥和私钥，如下：

		A 密钥A:32
		B 密钥B:312.53125

		源数据     加密后的数据A     加密后的数据B     

		 100          3200         31253.125

		加密后的数据A解密方法     加密后的数据B解密方法

		  3200*312.53125         31253.125*32


		我们会发现这两个计算出来都是1000100，因此我们需要的源数据是100.

		原理：32*312.53125 = 10001，因此可以将数据转化为:‘源数据000源数据’的形式，所以10001就可以拆分成两个数的乘积。

		为什么会有公钥和私钥的称呼呢？

		如果A想发送数据给B，有如下的步骤：
		* A发送密钥A给B
		* A将源数据用密钥B加密，生成加密后的数据B
		* A将加密后的数据B发送给B
		* B收到加密后的数据B和密钥A，将两数相乘，解密得到源数据

		因此这里的密钥A因为会通过网络传输给B，会被其他人拦截，因此叫做公钥，这是暴露出来的
		密钥B只保存在A的本地，没有通过传输，所以不会有人能够获取到，因此叫做私钥


二、消息完整性验证
	
	数据加密完成了，这样就不会有人知道我们要传递的源数据的内容是什么了，但是这个方案还有一些没有解决的问题，比如，如果有人想要破坏你的传输数据，
	达到破坏你的服务器的目的，导致你的服务器崩溃，这样要如何防止。

	这个在我们的易微联的登录接口有做这样一个处理的，我们已登录接口为例，说明一下：

	* 登录接口有一个参数Auth是通过请求头传递到服务端的，服务端会根据这个鉴权来判断是否需要处理这个登录请求，步骤如下：

	** 客户端拼接参数params,其中包括登录账号及密码等，
	** 根据params的字符串做SHA加密，此处也可以使用MD5，这里生成的就是Auth值
	** 将Auth值与参数一起传递给服务端
	** 服务端先获取到参数，并且以相同的方式做SHA或者MD5，生成Auth1
	** 对比是否和客户端生成的一致
	** 如果一致，那么处理该信息，如果不一致，则不处理该信息

	这样，如果信息不完整则会不处理，这里将params字符串生成Auth值可能需要MAC算法，会根据一个密钥来生成一个不可逆的标识符，
	这个标识符就可以作为Auth值

三、如何同步对称加密算法密钥

	如果我们的通讯直接使用对称加密算法保证安全，或者我们需要保证消息完整性，用到MAC算法生成一个MAC值，那我们都需要一个两端同步相同的
	密钥，我们如何能保证我们同步密钥的过程不会将密钥泄漏呢？除了两端私下交换密钥以外，我们还可以通过非对称加密算法来保证该密钥不会泄露

	如下：
				 加密             解密
	对称加密密钥 ------> 加密数据A -------> 对称加密密钥
 				  ^                ^
 			      |                |

               公钥（32）     私钥（31253.125）

    这样我们就可以保证对称加密密钥或者MAC算法使用的密钥不外泄


四、公钥真实性保证
	
	非对称加密还有一个问题没有结局，如果现在有一个C，冒充A向B发送了一个公钥，这个时候C就能向B发送数据，这个时候就很危险，因此，我们
	需要一种方式来验证公钥的真实性。

	根据这个问题产生了一个权威机构CA，CA可以签发认证过的数字证书（数字证书中包含公钥和身份信息，这两个信息是相对应的，有CA认证过的）
	但是如何认证我们得到的这个数字证书是不是真实的，我们就需要PKI（公钥基础设施）,这是一个是提供公钥加密和数字签名服务的系统或平台。

	PKI包含很多功能，可以管理、更新、签发、查询数字证书或密钥，我们的MAC电脑中的钥匙串访问其实就是一个PKI。

	我们当前易微联客户端是只要是CA认证的数字证书，我们都可以通过，因此SSL服务器发送过来的数字证书，只要是CA认证的，我们就会直接使用
	其公钥

五、SSL协议的工作过程

	1. 客户端A发送支持的SSL版本，可支持的加密算法列表，以及一个随机数（Random1）给服务端B

        1.SSL版本号
        2.可支持的加密算法列表
        3.Random1
	A -------------------> B


	2. 服务端B从可支持的加密算法列表中选出一个，然后生成一个随机数（Random2），并且判断是否运行重用本次会话，并将结果传递给客户端A

        1.挑选出的加密算法
        2.Random2
        3.会话ID(如果可重用的话)
	A <------------------- B


	3. 服务端B将自己从CA获取的数字证书发送给客户端A，客户端A通过PKI进行验证证书真实性

	      1.数字证书
	A <------------------- B
    ^
    |
PKI验证证书真实性

    4. (可选)如果所选加密算法是DH加密算法，需要发送DH参数到客户端A

           1.DH参数
	A <------------------- B


	5. (可选)如果客户端A的证书服务端B也需要验证的话，服务端B会向客户端A发送要求发送数字证书的请求

		1.要求发送数字证书
	A <------------------- B


	6. 服务端B通知客户端A，加密算法及SSL版本协商已完成

		1.协商完成标识
	A <------------------- B

	7. (可选)如果服务端B要验证客户端A的证书的话，这时候客户端A要将数字证书发给服务端B,服务端B可以通过PKI认证

	     1.数字证书
	A -------------------> B
						   ^
						   |
					PKI验证证书真实性

    8. 客户端A验证服务端数字证书通过，产生一个随机数（Random3），从数字证书中提出公钥，用公钥对Random3进行非对称加密



    9. 发送给服务端B加密后的Random3数据，服务端B得到数据后，使用自己的私钥解密，获得到Random3,此时客户端A和服务端B
    都得到了三个随机数

    	1.公钥加密后的Random3
	A -------------------> B
						   ^
						   |
					私钥解密获得Random3

    10. 客户端A和服务端B都通过这三个随机数，以相同的方法生成对称密钥（主密钥）

    A                         B
    ^                         ^
	|                         |
通过三个随机数生成主密钥   通过三个随机数生成主密钥


	11. 客户端A发送消息，通知服务端B握手过程已结束

		1.握手已结束消息
	A -------------------> B

	12. 客户端A将之前所有自己发送的，和接收到服务端B的消息拼接到一起，并且生成Hash值，然后用主密钥和之前确定的加密方式进行加密
	并且发送给服务端B，服务端B解密，并且也将之前的摘要生成Hash值，进行对比

	    1.主密钥加密过后
	    的摘要Hash值
	A -------------------> B
						   ^
						   |
					生成Hash值，解密对比

	13. 服务端B发送消息，通知客户端A握手过程已结束

		1.握手已结束消息
	A <------------------- B

	14. 服务端B将之前所有自己发送的，和接收到客户端A的消息拼接到一起，并且生成Hash值，然后用主密钥和之前确定的加密方式进行加密
	并且发送给客户端A，客户端A解密，并且也将之前的摘要生成Hash值，进行对比

	    1.主密钥加密过后
	    的摘要Hash值
	A <------------------- B
    ^
    |
生成Hash值，解密对比

	15. 主密钥验证完成，后续的数据交流都使用主密钥进行对称加密解密


六、会话重用方式

	SSL协议需要使用非对称密钥算法来加密密钥、验证通信对端的身份，计算量较大，占用了大量的系统资源。为了简化SSL握手过程，SSL允许
	重用已经协商过的会话，需要如下两个步骤后，执行上述11及以后的步骤：

	1. 客户端A发送可重用会话ID给服务端

        1.会话ID
	A -------------------> B

	1. 服务端B收到会话ID后，检查自身储存，并且返回是否允许重用该回话，如果不允许，则重新从之前的第一步开始握手

        1.是否允许重用消息
	A <------------------- B

	11/1步骤。。。。


参考资料：
http://www.h3c.com/cn/d_200812/622834_30003_0.htm#_Toc212542700
https://www.jianshu.com/p/7158568e4867









